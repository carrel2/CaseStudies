{#
/**
 * Available variables
 * -------------------
 *
 * {{ animal }} - AppBundle/Entity/Animal
 * {{ size }} - array( 0 => width, 1 => height, ... )
 * {{ checked }} Doctrine/Common/Collections/ArrayCollection( AppBundle/Entity/HotSpotInfo )
 * {{ userDay }} - AppBundle/Entity/UserDay
 * {{ day }} - AppBundle/Entity/Day
 */
#}

{% extends 'base.html.twig' %}

{% block scripts %}
	{{ parent() }}

	<script>
		function hotspot(id, coords, color) {
			this.id = id;
			this.coords = coords;
			this.color = color;
			this.checked = false;

			this.drawDefault = function(ctx = $('#canvas-default')[0].getContext("2d")) {
				var width = ctx.canvas.width, height = ctx.canvas.height;

				ctx.beginPath();
				ctx.moveTo(coords[0] * width, coords[1] * height);

				coords.forEach(function(item, index) {
					if(index % 2 == 0) {
						var x = coords[index] * width, y = coords[index+1] * height;
						console.log(x,y);
						ctx.lineTo(x, y);
					}
				});

				ctx.closePath();
				ctx.fillStyle = "rgba(200,200,200,0.5)";
				ctx.fill();
			}

			this.drawHidden = function(ctx = $('#canvas-hidden')[0].getContext("2d")) {
				var width = ctx.canvas.width, height = ctx.canvas.height;

				ctx.beginPath();
				ctx.moveTo(coords[0] * width, coords[1] * height);

				coords.forEach(function(item, index) {
					if(index % 2 == 0) {
						ctx.lineTo(coords[index] * width, coords[index+1] * height);
					}
				});

				ctx.closePath();
				ctx.fillStyle = color;
				ctx.fill();
			}

			this.draw = function() {
				this.drawDefault();
				this.drawHidden();
			}
		}

		function promptWeight() {
			var prompt = $('#prompt'), weight = $('#estimated_weight');

			if( prompt.length == 0 ) {
				weight.addClass('is-danger').parent().prev().append('<span id="prompt" style="position: absolute;right: 0;font-weight: initial;">Please provide an estimated weight to continue.</span>');
			}

			prompt.clearQueue();
			prompt.animate({'font-size': '+=2px'});
			prompt.animate({'font-size': '-=2px'});
			weight.focus();
		}

    function modal(event=null) {
			if( event ) {
				event.preventDefault();
			}

			var eWeight = $("#estimated_weight").val();

			if( {{ app.user.days|length == 1 ? "true" : "false" }} && !eWeight ) {
				promptWeight();
				return;
			}

			$('.modal').toggleClass('is-active');
			$('.modal').load( "{{ path('differentials') }}", {estimated_weight: eWeight}, function() {
				$('.modal-card-body').prepend( $('#checked').children() );

				$('.delete').on('click', function() {
					$.post( "{{ path("differentials", { 'moveOn': true }) }}", function() {
						location.href = "{{ path("diagnostics") }}";
					});
				});
				$('#continue').on('click', function() {
					var input = $('#differentials').val();
					if( input.length ) {
						$.post( "{{ path("differentials", { 'moveOn': true }) }}", {explanation: input}, function(result, status, xhr) {
							location.href = "{{ path("diagnostics") }}";
						});
					}
				});
			});
		}

		function resizeCanvas() {
			var c = $('#canvas-default'), p = c.parent();
			var targetHeight = c.width() / {{ size[0] / size[1] }};

			p.css('height', p.innerHeight() - p.height() + targetHeight + "px");
		}

		var hotspotList = [];

		$(function() {
      {% if app.session.get('modalUp', false) %}
				modal();
			{% endif %}

			$(window).resize(resizeCanvas);
			$(window).resize();

			$('body').append('<canvas id="canvas-hidden" height="{{ size[1] }}" width="{{ size[0] }}" style="display:none;"></canvas>');

			{% for hotspot in animal.hotspots %}
        var coords{{ hotspot.id }} = {{ "[" ~ hotspot.coords|join(",") ~ "]" }};
        var newHotspot = new hotspot({{ hotspot.id }}, coords{{ hotspot.id }}, "rgb(#,#,#)".replace(/#/g, hotspotList.length + 1));

        hotspotList.push( newHotspot );

				if( $('#hotspot-{{ hotspot.id }}').length > 0 ) {
					//newHotspot.drawDefault();
					newHotspot.checked = true;
				}

        newHotspot.drawHidden();
      {% endfor %}

			$.data(document.body, "hotspots", hotspotList);

			$('#canvas-default').on("click", function(e) {
				var rect = this.getBoundingClientRect();
				var pos = {
					x: (e.clientX - rect.left) / $('#canvas-default').width() * $('#canvas-hidden').width(),
					y: (e.clientY - rect.top) / $('#canvas-default').height() * $('#canvas-hidden').height()
				};

				var rgb = document.getElementById("canvas-hidden").getContext("2d").getImageData(pos.x.toFixed(0), pos.y.toFixed(0), 1, 1);
				var pos = rgb.data[0];

				if( pos ) {
					var h = hotspotList[pos - 1];

					if( !h.checked ) {
						$.get('/courses/cs/update/' + h.id, function(data, status) {
							$('#checked').append(data)
						});

						//h.drawDefault();
						h.checked = true;
					}
				}
			});
		});
	</script>
{% endblock %}

{% block body %}
	<div class="column is-full">
		<p class="title is-2">{{ app.user.caseStudy.title }}</p>
		<p class="subtitle is-4">Physical Examination - Day {{ app.user.days|length }}</p>
	</div>

	{% if day.description %}
		<div class="column is-full">
			<p class="content">{{ day.description }}</p>
		</div>
	{% endif %}

	<div class="column is-full">
		<div class="box">
			<p>Click the image below to perform a physical examination. Some results have soundbytes, click the <span class="icon has-text-success"><i class="far fa-play-circle"></i></span> to play them.</p>
		</div>
	</div>

	<div class="column is-half-desktop">
		<canvas id="canvas-default" style="background-image:url({{ asset( 'images/' ~ animal.image ) }}); background-size:contain;height:100%;width:100%;"></canvas>
	</div>

	<div id="checked" class="column is-half-desktop">
		{% for spot in checked %}
			<li id="hotspot-{{ spot.id }}">{{ spot.hasSound() ? ("<span class='icon has-text-success' onclick='this.firstChild.play()'><audio src='" ~ asset('sounds/' ~ spot.sound) ~ "'></audio><i class='far fa-play-circle'></i></span>")|raw : "" }}<em>{{ spot.hotspot.name }}:</em><span class="info"> {{ spot.info|raw }}</span></li>
		{% endfor %}

		{% for emptyHotspotInfo in userDay.emptyHotspotsInfo %}
			<li id="hotspot-{{ emptyHotspotInfo.id }}">{{ emptyHotspotInfo.name }}: No information available</li>
		{% endfor %}
	</div>

	{% if app.user.days|length == 1 %}
		<div class="column is-half-desktop">
			<label class="label asterisk" style="position: relative;" required>Estimated weight (kg)</label>

			<div class="control has-icons-left">
				<input id="estimated_weight" class="input" type="text" placeholder="Weight (kg)">

				<span class="icon is-left">
					<i class="fas fa-weight"></i>
				</span>
			</div>
		</div>
	{% endif %}

	<div id="modal" class="modal">
	</div>
{% endblock %}

{% block footer %}
	<div class="tabs">
		<ul>
			<li><a onclick="modal(event)">Continue</a></li>
		</ul>
	</div>

	{{ parent() }}
{% endblock %}
